---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: dev-api-gateway
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: test-api-gateway
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: staging-api-gateway
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
data:
  lua_ingress.lua: |
    local ngx_re_split = require("ngx.re").split

    local original_randomseed = math.randomseed
    local string_format = string.format
    local ngx_redirect = ngx.redirect

    local _M = {}

    local seeds = {}
    -- general Nginx configuration passed by controller to be used in this module
    local config

    local function get_seed_from_urandom()
      local seed
      local frandom, err = io.open("/dev/urandom", "rb")
      if not frandom then
        ngx.log(ngx.WARN, 'failed to open /dev/urandom: ', err)
        return nil
      end

      local str = frandom:read(4)
      frandom:close()
      if not str then
        ngx.log(ngx.WARN, 'failed to read data from /dev/urandom')
        return nil
      end

      seed = 0
      for i = 1, 4 do
          seed = 256 * seed + str:byte(i)
      end

      return seed
    end

    math.randomseed = function(seed)
      local pid = ngx.worker.pid()
      if seeds[pid] then
        ngx.log(ngx.WARN,
          string.format("ignoring math.randomseed(%d) since PRNG is already seeded for worker %d", seed, pid))
        return
      end

      original_randomseed(seed)
      seeds[pid] = seed
    end

    local function randomseed()
      local seed = get_seed_from_urandom()
      if not seed then
        ngx.log(ngx.WARN, 'failed to get seed from urandom')
        seed = ngx.now() * 1000 + ngx.worker.pid()
      end
      math.randomseed(seed)
    end

    local function redirect_to_https()
      if ngx.var.request_method == "OPTIONS" then
         return false
      end
      return ngx.var.pass_access_scheme == "http" and (ngx.var.scheme == "http" or ngx.var.scheme == "https")
    end

    local function redirect_host()
      local host_port, err = ngx_re_split(ngx.var.best_http_host, ":")
      if err then
        ngx.log(ngx.ERR, "could not parse variable: ", err)
        return ngx.var.best_http_host;
      end

      return host_port[1];
    end

    local function parse_x_forwarded_host()
      local hosts, err = ngx_re_split(ngx.var.http_x_forwarded_host, ",")
      if err then
        ngx.log(ngx.ERR, string_format("could not parse variable: %s", err))
        return ""
      end

      return hosts[1]
    end

    function _M.init_worker()
      randomseed()
    end

    function _M.set_config(new_config)
      config = new_config
    end

    -- rewrite gets called in every location context.
    -- This is where we do variable assignments to be used in subsequent
    -- phases or redirection
    function _M.rewrite(location_config)
      -- ngx.var.pass_access_scheme = ngx.var.scheme
      ngx.var.pass_server_port = ngx.var.server_port
      ngx.var.best_http_host = ngx.var.http_host or ngx.var.host

      if config.use_forwarded_headers then
        -- trust http_x_forwarded_proto headers correctly indicate ssl offloading
        if ngx.var.http_x_forwarded_proto then
          ngx.var.pass_access_scheme = ngx.var.http_x_forwarded_proto
        end

        if ngx.var.http_x_forwarded_port then
          ngx.var.pass_server_port = ngx.var.http_x_forwarded_port
        end

        -- Obtain best http host
        if ngx.var.http_x_forwarded_host then
          ngx.var.best_http_host = parse_x_forwarded_host()
        end
      end

      ngx.var.pass_port = ngx.var.pass_server_port
      if config.is_ssl_passthrough_enabled then
        if ngx.var.pass_server_port == config.listen_ports.ssl_proxy then
          ngx.var.pass_port = 443
        end
      elseif ngx.var.pass_server_port == config.listen_ports.https then
        ngx.var.pass_port = 443
      end

      if location_config.force_ssl_redirect and redirect_to_https() then
        local uri = string_format("https://%s%s", redirect_host(), ngx.var.request_uri)

        if location_config.use_port_in_redirects then
          uri = string_format("https://%s:%s%s", redirect_host(), config.listen_ports.https, ngx.var.request_uri)
        end
        ngx.header.access_control_allow_origin = "*"
        ngx.header.access_control_allow_credentials = "true"
        ngx.header.access_control_allow_methods = "GET, POST, PUT, DELETE, OPTIONS"
        ngx.header.access_control_allow_headers = "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With"
        ngx_redirect(uri, config.http_redirect_code)
      end
    end

    return _M
kind: ConfigMap
metadata:
  name: lua-ingress
  namespace: kube-system

---
apiVersion: v1
data:
  cert.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJBQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0hURWJNQmtHQTFVRUF3d1NhVzVuY21WemN5MTIKWVd4cFpHRjBhVzl1TUNBWERURTVNRGt3TWpBek1qY3lPRm9ZRHpJeE1Ua3dPREE1TURNeU56STRXakExTVRNdwpNUVlEVlFRRERDcHBibWR5WlhOekxYWmhiR2xrWVhScGIyNHRkMlZpYUc5dmF5NXJkV0psTFhONWMzUmxiUzV6CmRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVXBUaHcxcm1NMExGMXVybEkKNGFhUHFBYVMydFg0cHk3aFJNc3djS0tmSGJNWVhmV3dlNjM0cXJxUXU1UzdDTkduY0UzM1duOUFZeDV3aWc3TQp6dVpIU0xPUGJ0dWF2TnppVmt3aHU1bEVqR1MwZjhyU24wOWs4YzVGeHJMc2pXSlcyNm1QKzROdnVsZ24xR21vCmx1WnhiRHBIV0wxZklRUTJUNEZQbEpOWTVKVEVTTEkveEwxOGpyVndBTGNyTU8vS0V0Y0V5K2YxL0Q4b2FuL3oKRStZQXorRG9uWmd3NGx1MThjQ1lycGZTU1o1ODdBRk1DRXlEVWNmcXJ4eS9JcEpmSlV4N3hNZHJ4dXo4NXdCWgp1RzVHMFF4NnJHRndsbFpESWZNNkxOM0RVL1Q3MjdJcEhVUzlTUzJJWTNralVvaVZ5ZTJud3FDRkJ3SmxlZm9hCmJCSW5BZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDekFVa3ZySHRSWEU5OU5RK0VYRHQ5VWlpN1UKb3IxTWlpc0ZBcHRWYlQrQ1UybnJHQ3FQelFwR3ZIQjhmWmJjL1ZNdkR3dWhxeERPVCsybnJERUZiOWVIOWxtRApNUW1Zci9FVVN5NEprcENpbS9sNlpkVWw3OXhQc3dJWmpWc3pBeHRVRGRwdmc1SXpIc3VIT2NFMzVHYmlJd3VFClhvek13K20wOGsyZllBWlVJY2t3a2dtYXdpb0g1YS9ZM240dTJZNSt5S29nYmJ0Z1U2U1pVK0hqU0lrbjdCR20KdVhLamVCdzEvQTdOYThQNzhTemFHMVJDMmdEbE9yWlNRMXBNN1VLcU45RzlwM292RUtMUS85WFRkdmcyaFpiegorSFAxNmsyKytPNHdjMWRBb0dJVUlIZEUxWUJMUElRRkZNYVY0NmRPcnhjV0tSdlNyUWs2RENvSHYzWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMUtVNGNOYTVqTkN4ZGJxNVNPR21qNmdHa3RyVitLY3U0VVRMTUhDaW54MnpHRjMxCnNIdXQrS3E2a0x1VXV3alJwM0JOOTFwL1FHTWVjSW9Pek03bVIwaXpqMjdibXJ6YzRsWk1JYnVaUkl4a3RIL0sKMHA5UFpQSE9SY2F5N0kxaVZ0dXBqL3VEYjdwWUo5UnBxSmJtY1d3NlIxaTlYeUVFTmsrQlQ1U1RXT1NVeEVpeQpQOFM5Zkk2MWNBQzNLekR2eWhMWEJNdm45ZncvS0dwLzh4UG1BTS9nNkoyWU1PSmJ0ZkhBbUs2WDBrbWVmT3dCClRBaE1nMUhINnE4Y3Z5S1NYeVZNZThUSGE4YnMvT2NBV2JodVJ0RU1lcXhoY0paV1F5SHpPaXpkdzFQMCs5dXkKS1IxRXZVa3RpR041STFLSWxjbnRwOEtnaFFjQ1pYbjZHbXdTSndJREFRQUJBb0lCQVFETTVuK2lTMlgwQ0V4WApjeHVDM055UVpJb2hDL2xPWmxwSCt2QUh0eUVjVFpQN2tONWp0bW1HeVl5SVZoZ1V1WVM3NFAxZnNiWVlwdW4zCjZ6QWpyZUk3SWhUVHl6Q1V4QlBiak9oRFFPK0pHL2NWN21YVDJtcTRqRUFGQUZmOGxLZ0RwaHFYZ1BXL3ZVR2cKNzQ3NFFwKysvMWlRMHpOMjdPdVFJY0FxbkxIMjNsa0NkUVRBZmhlZThUT1BUb2IvNm1iM090RGJxdlY0U29ZMwpzeUlyT2gwVHlSR0VycWUyRVcyUTZYaTd2bmNJRlBYMWFZZWZwYzlDeTdtMWZWTkRzVnlxZ1hlc0RhMlhFMENJClF5b044YnNvam1WVE9nUlNVTFpPMUhtMzZTSERUM2FaT0VKdEFxcUpvOTBXcU5hMG1oQVZIV21mNWwzczRFWTIKUGQveDQzbHhBb0dCQVBlYkNWR2lWeVJsY2VZWXBsYmE3RzYzcTNFU05lYjVud0x1M0lMVld1NHYycG13bVV0bQpUOUF5OUU2a0pSMmE1U01ldS9iVEcrdm9iSm1UNHJqOXBJeWhqYnRsaEUwTGZOcWxadXBsakVJZStJenhucjFYClkvODZEYVk3SWtZU040RWFFUitrNjFMVCtkQ3pLdFJEYm9ZMTErWm94SkZwOUQrVkYyUFRjcS8xQW9HQkFOdmEKdzk1Qys4Z3M3VTRVRXp6NmZhS3I3b3QzemRJVDZzTEhhdGVzWWxZVG1EUnhRN0U4QXE4TDEreWFjSXNMczBPYQpEbzFQTC9PQmN3ZnJnVm1iNXd4QWFLLzZwK3prNFFGODV2eTF5T251VXRHNWRYUWRwdFFmWTNJYWdicG1KcEpJCmRKTmF2SEV6WVZGMHFMb28xUlNNSkhhVFRlRThUa3lrZVRzangvUXJBb0dBVEk1RDhGaVlSdW1Tc01qNFRTeDkKSTdKb01KcW56ZFZxUTdia3VSTU1mVTZRY1NwNEN5Y0VFR1Jnd3h2ZldlcjFZOGx4NWx2WmF6USt0N0ZRelUrbgpHOUFyaVVCWENwYzlzRUNwdEZsWFoyNDUvU0lMcVpFbW10Z3hOaTljWm52bGEyWksyeFRicVkxZTFSZEFhOGE1Cm1vZDFUSWtpRmEvRDFCRGQzWUNZR2kwQ2dZRUFoaU81OGZoSWl0L3VnZjc1cGZEbmlzTUFMcFFRUGlic3k1N0UKYjRhOEVPeXZwditjWDV6UHZtR3BnckRRRGVZN24vbDArMzdmTU9GQWdBcU94MCs1N3QyMWdmbWJUNHh1Ukd3aQp1dmxtOW1QMG9BVlp4bGo1R3Q5ejI0Q1V1bGZ0SEwrY2NQT2htaWZSTHRQUXhwUjNQYXdyNnpVQkJYVzRDRWNwCnVJMmlTRFVDZ1lBRUpCWGdSR2trZWZWM2ZZK3BrdXB5ZGNIYWVtQitVVW5LeldFT0RrUHpDaGN2OGZsem94VzMKT2xNeWxvUnp4VHd2cWF2WER4SE1KOWxDMXVQWlFtTit5TDlSNnV2eVhFVnZmOUIwazQ5K3FuWG11VDk5NjVMMgpjdjVYS05WdmNPenNNeTdiQk1PUmw2Wlp3bWZ6QWFBK0xRTU1RZGcwcjlaam80bFViMEc2NkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  name: ingress-validation
  namespace: kube-system
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  name: ingress-validation-webhook
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - name: admission
    port: 443
    protocol: TCP
    targetPort: 8751
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: check-ingress
webhooks:
- clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lKQUlrblgzQ3pHcXA2TUEwR0NTcUdTSWIzRFFFQkN3VUFNQjB4R3pBWkJnTlYKQkFNTUVtbHVaM0psYzNNdGRtRnNhV1JoZEdsdmJqQWdGdzB4T1RBNU1ESXdNekl6TWpGYUdBOHlNVEU1TURndwpPVEF6TWpNeU1Wb3dIVEViTUJrR0ExVUVBd3dTYVc1bmNtVnpjeTEyWVd4cFpHRjBhVzl1TUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMUw5cnZWTWgzMUJ2ZTgvNXYxajR1bm5RZE1Kb1dLUmcKbW1lcmQ5MkRxQVlPZ3FoTjdNS0VJdDUzS0hDaXhQYTNDTkRvWFFjdGlzbWVNZGREOWdoamhjYnhIaEdkRFJCdQpLTk80UTBTb2doMGhrZnlOOUxsTFc0TmxORzhNNnlHbzY0Z1dIallTdG9FU1dmT1BhcDJGV0dvckFoRzVYcXZmCllVN3V2WWFkV0d3cTJ1ZnlrT1NPcTV6aHJpVnR2MzhUOHR1aE9yelN5WkV5NkFneVVFT29nNWJQZHUweE9hTmgKR0JNd0JoRVpucFVDTFVSeHZFTGh4QlRSeEZGZE8rT2Fyc01rUWVjcXhicFJIQzBZZW14cmlGR2NBbm9nQXVodQpRK2ttdjRnajU5M2N6Z1JVRXE5dk5BcHRjL0VIR2hINXFIR0FrUXVsRnAzQXphbExRbGxlYXdJREFRQUJvMUF3ClRqQWRCZ05WSFE0RUZnUVVNSjErcFZyYTRSb0R1aVBwVGdZOUd0NmhnRmd3SHdZRFZSMGpCQmd3Rm9BVU1KMSsKcFZyYTRSb0R1aVBwVGdZOUd0NmhnRmd3REFZRFZSMFRCQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBSlkrZWZEZ1ZxeTNEOEY4WXl5cklOa0drWjlpWnlMMjVuU0V2aVJ2SHVMZzNObkRVWnhGbk9vVkdWdjk4CkhINUthd01pWW1lbXA3K3JDTnhqcEl1b1ZGVXlTbEhlQlpSeFY2ZlBFcnhyMUNyYkpYMGRUTDhRbDA3REJ3dDUKWXlZU3psM21SODlveCs5NTdEaGFWb0Q1R0s2RjM2K1NqQ2YyOWVEeXZnU3Jxa0N2dUN3bGR5OGNqMHp3WjZxagpTS05jNTFybDlnMkRvNmpEYnFWRFVLQ2ZvVTFvUCtFWTNjUlNQK1pkbVRhSTEwZEVWQW5TMENTd2VjZDhEWTJFCkJIT295WWFpbStaQ0tVVUZFUEUrQnphMFBqaFpKTiszZGcwUXFTTld6SlF4cDFHdFZnZ1oyMnI4TDBxYUx0bUIKUllUTG1rK1p3c1MvdlM3MWx2UUpiZmhGUUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    service:
      name: ingress-validation-webhook
      namespace: kube-system
      path: /extensions/v1beta1/ingress
  failurePolicy: Fail
  name: validate.nginx.ingress.kubernetes.io
  rules:
  - apiGroups:
    - extensions
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingresses

---
apiVersion: v1
data:
  main.lua: |
    local cjson       = require "cjson.safe"
    local floor       = math.floor
    local timer_at    = ngx.timer.at
    local ngx_now     = ngx.now
    local udp_sock    = ngx.socket.udp
    local ngx_re      = require "ngx.re"

    local ngx_log          = ngx.log
    local ngx_INFO         = ngx.INFO
    local ngx_ERR          = ngx.ERR

    local _M = {}

    function _M.access()
       ngx.req.set_header("terminus-request-bg-source-addon-type", "ApiGateway")
       ngx.req.set_header("terminus-request-bg-source-addon-id", "ApiGateway")
    end

    local function send_message(premature, host, port, body)
      if premature then
         return
      end
      local sock = udp_sock()
      local ok, err = sock:setpeername(host, port)
      if not ok then
        ngx_log(ngx_ERR, "could not set peer name for UDP socket: ", err)
        return
      end
      sock:settimeout(1000)
      ok, err = sock:send(body)
      if not ok then
        ngx_log(ngx_ERR, "could not send data: ", err)
      else
        ngx_log(ngx_INFO, "spot send success, body: ", body)
      end
      ok, err = sock:close()
      if not ok then
        ngx_log(ngx_ERR, "could not close socket: ", err)
      end
    end

    local function report_spot_metric()
      local tags_header_prefix = "terminus-request-bg-"
      local host = "127.0.0.1"
      local instanceid = "ApiGateway"
      if not host or host == "" then
         ngx_log(ngx_INFO, "report spot metrics failed, host not found")
         return
      end

      local var = ngx.var
      local now = floor(ngx_now() * 1000) * 1000000
      local start_time = floor(ngx.req.start_time() * 1000) * 1000000

      local err = "false"
      if ngx.status >= 400 then
        err = "true"
      end

      local success = "0"
      local client_err = "0"
      local server_err = "0"

      if ngx.status < 400 then
        success = "1"
      elseif ngx.status < 500 then
        client_err = "1"
      else
        server_err = "1"
      end

      local total_conns = tonumber(var.connections_active)
      local idle_conns = tonumber(var.connections_waiting)

      local upl_sum = 0
      local upl_arr, err = ngx_re.split(var.upstream_response_time, ",|:")
      if err then
        ngx_log(ngx_ERR, "parse upstream response time failed: ", err)
      else
        for _, latency in ipairs(upl_arr) do
          local latency_num = tonumber(latency)
          if latency_num then
            upl_sum = upl_sum + latency_num
          end
        end
      end

      local metric = {
         name = "application_http",
         timestamp = now,
         fields = {
            cnt = 1,
            elapsed = floor(now - start_time),
            http_status_code = ngx.status,
            total_conns = total_conns,
            idle_conns = idle_conns,
            active_conns = total_conns - idle_conns,
            in_bytes = tonumber(var.request_length),
            out_bytes = tonumber(var.bytes_sent),
            upstream_latency = upl_sum,
            latency = tonumber(var.request_time),
         },
         tags = {
            component = "Http",
            target_addon_type = "ApiGateway",
            target_addon_id = instanceid,
            http_status_code = tostring(ngx.status),
            req_host = var.host,
            req_success = success,
            req_client_err = client_err,
            req_server_err = server_err,
            error = err,
         },
      }

      local resp_headers = ngx.resp.get_headers()
      if resp_headers then
         local target_terminus_key = resp_headers["terminus-response-terminus-key"]
         if target_terminus_key then
            metric.tags["target_terminus_key"] = target_terminus_key
         end
      end

      local req_headers = ngx.req.get_headers()
      if req_headers then
         for k, v in pairs(req_headers) do
            if k ~= "terminus-request-bg-source-addon-type" and k ~= "terminus-request-bg-source-addon-id" and k:find(tags_header_prefix, 1, true) == 1 then
               local key = k:sub(tags_header_prefix:len() + 1)
               key = key:gsub("-", "_")
               metric.tags[key] = v
            end
         end
      end

      local metrics = {metric}
      local body, err = cjson.encode(metrics)
      body = body:gsub([["timestamp":1%.(%d+)e%+18]], [["timestamp":1%1000000]], 1)
      if err then
         ngx_log(ngx_ERR, "could not JSON encode given table entity: ", err)
      end

      local ok, err = timer_at(0, send_message, host, 7082, body)
      if not ok then
         ngx_log(ngx_ERR, "[spot-collector] could not create timer: ", err)
      end
    end


    function _M.log()
       report_spot_metric()
    end
    return _M
kind: ConfigMap
metadata:
  name: nginx-spot-collector
  namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: {{ .Values.ingress.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app: nginx-ingress-lb
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: nginx-ingress-serviceaccount
      nodeSelector:
        dice/lb: "true"
      containers:
        - name: nginx-ingress-controller
          image: erda-registry.cn-hangzhou.cr.aliyuncs.com/erda/nginx-ingress-controller:0.25.1-1
          imagePullPolicy: IfNotPresent
          args:
            - /nginx-ingress-controller
            - --validating-webhook=:8751
            - --validating-webhook-certificate=/etc/nginx/ingress-validation/cert.pem
            - --validating-webhook-key=/etc/nginx/ingress-validation/key.pem
            - --enable-dynamic-certificates=false
            - --default-ssl-certificate=$(POD_NAMESPACE)/ingress-nginx-https
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          resources:
            requests:
              cpu: "0.1"
              memory: "10Mi"
            limits:
              cpu: "0.5"
              memory: "1Gi"
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 33
          volumeMounts:
            - mountPath: /etc/nginx/ingress-validation
              name: ingress-validation
              readOnly: true
            - mountPath: /etc/nginx/netportal-edge
              name: netportal-edge
              readOnly: true
            - mountPath: /etc/nginx/netportal-admin
              name: netportal-admin
              readOnly: true
            - mountPath: /etc/localtime
              name: host-time
              readOnly: true
            - mountPath: /etc/nginx/lua/lua_ingress.lua
              name: lua-ingress
              readOnly: true
              subPath: lua_ingress.lua
            - mountPath: /etc/nginx/template/nginx.tmpl
              name: nginx-template
              readOnly: true
              subPath: nginx.tmpl
            - mountPath: /etc/nginx/lua/plugins/spot-collector/main.lua
              name: nginx-spot-collector
              readOnly: true
              subPath: main.lua
          env:
            - name: DICE_COMPONENT
              value: ingress
            - name: MONITOR_LOG_KEY
              value: ingress
            - name: DICE_INGRESS_VERSION
              value: "1.3.16"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: validate
              containerPort: 8751
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
      tolerations:
        - operator: Exists
      volumes:
        - name: ingress-validation
          secret:
            defaultMode: 420
            secretName: ingress-validation
        - name: netportal-admin
          secret:
            defaultMode: 420
            secretName: netportal-admin
        - name: netportal-edge
          secret:
            defaultMode: 420
            secretName: netportal-edge
        - name: host-time
          hostPath:
            path: /etc/localtime
        - name: lua-ingress
          configMap:
            defaultMode: 420
            name: lua-ingress
        - name: nginx-template
          configMap:
            defaultMode: 420
            name: nginx-template
        - name: nginx-spot-collector
          configMap:
            defaultMode: 420
            name: nginx-spot-collector
